name: CI
env:
  BUILD_DIR: xa-build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build_linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install build dependencies
        run: >-
          sudo apt-get update;
          sudo apt-get -f -u install cmake ninja-build chrpath texinfo sharutils libffi-dev
          lsb-release patchutils diffstat xz-utils python3-dev libedit-dev libncurses5-dev swig
          python3-six python3-sphinx binutils-dev libxml2-dev libjsoncpp-dev pkg-config lcov
          procps help2man zlib1g-dev g++-multilib libjs-mathjax python3-recommonmark libpfm4-dev
          python3-setuptools libz3-dev ccache

      - name: build Linux
        run: ./build.sh

      - name: package config and build logs
        if: ${{ always() }}
        run: find ${BUILD_DIR} -name 'config.*' | zip -9 linux-build-logs.zip -@

      - name: upload config and build logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: build-logs
          path: linux-build-logs.zip

      - name: package artifacts
        run: tar cjf linux-artifacts.tar.bz2 artifacts

      - name: upload Linux artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: linux-artifacts.tar.bz2

  build_macos:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install build dependencies
        run: |
          brew update
          brew install cmake ninja ccache upx

      - name: build macOS
        run: bash ./build.sh

      - name: package config and build logs
        if: ${{ always() }}
        run: find ${BUILD_DIR} -name 'config.*' | zip -9 macos-build-logs.zip -@

      - name: upload config and build logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: build-logs
          path: macos-build-logs.zip

      - name: package artifacts
        run: tar cjf macos-artifacts.tar.bz2 artifacts

      - name: upload macOS artifacts
        uses: actions/upload-artifact@v2
        with:
          name: macOS
          path: macos-artifacts.tar.bz2

  build_windows:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Just some tests
        run: |
          clang++ --version

      - name: build Windows
        run: ./build.cmd

      - name: package artifacts
        run: 7z a windows-artifacts.7z artifacts

      - name: upload Windows artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Windows
          path: windows-artifacts.7z

  package_binaries:
    runs-on: ubuntu-20.04
    needs: [build_linux, build_macos, build_windows]
    steps:
      - uses: actions/checkout@v2

      - name: Download Linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux

      - name: Download macOS artifacts
        uses: actions/download-artifact@v2
        with:
          name: macOS

      - name: Download Windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: Windows

      - name: Unpack Linux artifacts
        run: |
          tar xf linux-artifacts.tar.bz2

      - name: Unpack macOS artifacts
        run: |
          tar xf macos-artifacts.tar.bz2

      - name: Unpack Windows artifacts
        run: |
          7z x macos-artifacts.7z

      - name: Pack Linux, macOS and Windows artifacts
        run: ./package.sh

      - name: upload Xamarin.Android LLVM Utilities
        uses: actions/upload-artifact@v2
        with:
          name: Xamarin.Android
          path: artifacts/xamarin-android-llvm.tar.bz2
